// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: proto/speedpb/speed.proto

package speedpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SpeedServiceClient is the client API for SpeedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpeedServiceClient interface {
	// QuickDULT
	QuickDULT(ctx context.Context, in *Options, opts ...grpc.CallOption) (*TestResult, error)
}

type speedServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSpeedServiceClient(cc grpc.ClientConnInterface) SpeedServiceClient {
	return &speedServiceClient{cc}
}

func (c *speedServiceClient) QuickDULT(ctx context.Context, in *Options, opts ...grpc.CallOption) (*TestResult, error) {
	out := new(TestResult)
	err := c.cc.Invoke(ctx, "/proto.speedpb.SpeedService/QuickDULT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpeedServiceServer is the server API for SpeedService service.
// All implementations must embed UnimplementedSpeedServiceServer
// for forward compatibility
type SpeedServiceServer interface {
	// QuickDULT
	QuickDULT(context.Context, *Options) (*TestResult, error)
	mustEmbedUnimplementedSpeedServiceServer()
}

// UnimplementedSpeedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSpeedServiceServer struct {
}

func (UnimplementedSpeedServiceServer) QuickDULT(context.Context, *Options) (*TestResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuickDULT not implemented")
}
func (UnimplementedSpeedServiceServer) mustEmbedUnimplementedSpeedServiceServer() {}

// UnsafeSpeedServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpeedServiceServer will
// result in compilation errors.
type UnsafeSpeedServiceServer interface {
	mustEmbedUnimplementedSpeedServiceServer()
}

func RegisterSpeedServiceServer(s grpc.ServiceRegistrar, srv SpeedServiceServer) {
	s.RegisterService(&SpeedService_ServiceDesc, srv)
}

func _SpeedService_QuickDULT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Options)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeedServiceServer).QuickDULT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.speedpb.SpeedService/QuickDULT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeedServiceServer).QuickDULT(ctx, req.(*Options))
	}
	return interceptor(ctx, in, info, handler)
}

// SpeedService_ServiceDesc is the grpc.ServiceDesc for SpeedService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SpeedService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.speedpb.SpeedService",
	HandlerType: (*SpeedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QuickDULT",
			Handler:    _SpeedService_QuickDULT_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/speedpb/speed.proto",
}
